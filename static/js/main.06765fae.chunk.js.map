{"version":3,"sources":["components/TodoItem.js","components/Todo.js","components/layouts/Header.js","components/layouts/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","toggleChange","bind","btnStyle","onClick","delTodo","Component","propType","PropType","object","isRequired","toggleComplete","func","color","border","borderRadius","cursor","float","Todos","todos","map","key","array","headerStyle","textAlign","Header","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","display","placeholder","flex","className","Addtodo","App","axios","delete","then","res","filter","console","log","post","data","get","Todo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.06765fae.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropType from \"prop-types\";\r\n\r\nclass TodoItem extends Component {\r\n  getStyle = () => {\r\n    return {\r\n      background: \"f4f4f4\",\r\n      padding: \"10px\",\r\n      borderBottom: \"1px #ccc dotted\",\r\n      textDecoration: this.props.todo.completed ? \"line-through\" : \"none\"\r\n    };\r\n  };\r\n\r\n  render() {\r\n    const { id, title } = this.props.todo;\r\n\r\n    return (\r\n      <div style={this.getStyle()}>\r\n        <p>\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={this.props.toggleChange.bind(this, id)}\r\n          />{\" \"}\r\n          {title}\r\n          <button style={btnStyle} onClick={this.props.delTodo.bind(this, id)}>\r\n            X\r\n          </button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTodoItem.propType = {\r\n  todo: PropType.object.isRequired,\r\n  toggleComplete: PropType.func.isRequired,\r\n  delTodo: PropType.func.isRequired\r\n};\r\n\r\nconst btnStyle = {\r\n  background: \"#ff0000\",\r\n  color: \"#fff\",\r\n  border: \"none\",\r\n  padding: \"5px 9px\",\r\n  borderRadius: \"50%\",\r\n  cursor: \"pointer\",\r\n  float: \"right\"\r\n};\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport PropType from \"prop-types\";\r\n\r\nclass Todos extends Component {\r\n\r\n  render() {\r\n    return this.props.todos.map(todo => (\r\n      <TodoItem key={todo.id} todo={todo} toggleChange={this.props.toggleChange} \r\n      delTodo={this.props.delTodo}/>\r\n    ));\r\n  }\r\n}\r\n\r\nTodos.propType = {\r\n  todos: PropType.array.isRequired,\r\n  toggleComplete:PropType.func.isRequired,\r\n  delTodo:PropType.func.isRequired\r\n};\r\n\r\nexport default Todos;\r\n","import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header style={headerStyle}>\r\n      <h1>TodoList</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nconst headerStyle = {\r\n  background: \"#333\",\r\n  color: \"fff\",\r\n  textAlign: \"center\",\r\n  padding: \"10px\"\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport PropType from \"prop-types\";\r\n\r\nclass AddTodo extends Component {\r\n  state = {\r\n    title: \"\"\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state.title);\r\n    this.setState({ title: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit} style={{ display: \"flex\" }}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"title\"\r\n          placeholder=\"Add Todo...\"\r\n          style={{ flex: \"10\", padding: \"5px\" }}\r\n          value={this.state.title}\r\n          onChange={this.onChange}\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Submit\"\r\n          style={{ flex: \"1\" }}\r\n          className=\"btn\"\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nAddTodo.propType = {\r\n    Addtodo: PropType.object.isRequired\r\n  };\r\n\r\nexport default AddTodo;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Todos from \"./components/Todo\";\nimport Header from \"./components/layouts/Header\";\nimport AddTodo from \"./components/layouts/AddTodo\";\n//import uuid from \"uuid\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  state = {\n    todos: []\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/todos?_limit=20\")\n      .then(res => this.setState({ todos: res.data }));\n  }\n\n  // Toggle changes\n  toggleChange = id => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })\n    });\n  };\n\n  //Delete Todo\n  delTodo = id => {\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`).then(res =>\n      this.setState({\n        todos: [...this.state.todos.filter(todo => todo.id !== id)]\n      })\n    );\n\n    console.log(id);\n  };\n\n  addTodo = title => {\n    axios\n      .post(\"https://jsonplaceholder.typicode.com/todos\", {\n        title: title,\n        completed: false\n      })\n      .then(res => this.setState({ todos: [...this.state.todos, res.data] }));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <Header />\n          <AddTodo addTodo={this.addTodo} />\n          <Todos\n            todos={this.state.todos}\n            toggleChange={this.toggleChange}\n            delTodo={this.delTodo}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}